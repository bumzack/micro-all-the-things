/* tslint:disable */
/* eslint-disable */
/**
 * Search Index Index Service
 * Search Index Index Service
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {exists} from '../runtime';

/**
 *
 * @export
 * @interface SearchDoc
 */
export interface SearchDoc {
    /**
     *
     * @type {string}
     * @memberof SearchDoc
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof SearchDoc
     */
    tconst?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof SearchDoc
     */
    titles?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof SearchDoc
     */
    actors?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof SearchDoc
     */
    directors?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof SearchDoc
     */
    genres?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof SearchDoc
     */
    characters?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof SearchDoc
     */
    runtimeMinutes?: number;
    /**
     *
     * @type {number}
     * @memberof SearchDoc
     */
    year?: number;
    /**
     *
     * @type {boolean}
     * @memberof SearchDoc
     */
    adult?: boolean;
    /**
     *
     * @type {string}
     * @memberof SearchDoc
     */
    titleType?: string;
}

/**
 * Check if a given object implements the SearchDoc interface.
 */
export function instanceOfSearchDoc(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SearchDocFromJSON(json: any): SearchDoc {
    return SearchDocFromJSONTyped(json, false);
}

export function SearchDocFromJSONTyped(json: any, ignoreDiscriminator: boolean): SearchDoc {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {

        'id': !exists(json, 'id') ? undefined : json['id'],
        'tconst': !exists(json, 'tconst') ? undefined : json['tconst'],
        'titles': !exists(json, 'titles') ? undefined : json['titles'],
        'actors': !exists(json, 'actors') ? undefined : json['actors'],
        'directors': !exists(json, 'directors') ? undefined : json['directors'],
        'genres': !exists(json, 'genres') ? undefined : json['genres'],
        'characters': !exists(json, 'characters') ? undefined : json['characters'],
        'runtimeMinutes': !exists(json, 'runtimeMinutes') ? undefined : json['runtimeMinutes'],
        'year': !exists(json, 'year') ? undefined : json['year'],
        'adult': !exists(json, 'adult') ? undefined : json['adult'],
        'titleType': !exists(json, 'titleType') ? undefined : json['titleType'],
    };
}

export function SearchDocToJSON(value?: SearchDoc | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'id': value.id,
        'tconst': value.tconst,
        'titles': value.titles,
        'actors': value.actors,
        'directors': value.directors,
        'genres': value.genres,
        'characters': value.characters,
        'runtimeMinutes': value.runtimeMinutes,
        'year': value.year,
        'adult': value.adult,
        'titleType': value.titleType,
    };
}

