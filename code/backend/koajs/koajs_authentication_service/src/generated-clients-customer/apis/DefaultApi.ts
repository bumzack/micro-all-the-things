/* tslint:disable */
/* eslint-disable */
/**
 * Customer Service
 * Customer Service
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {AddCustomerRequest, Customer,} from '../models';
import {AddCustomerRequestToJSON, CustomerFromJSON,} from '../models';

export interface AddCustomerOperationRequest {
    addCustomerRequest?: AddCustomerRequest;
}

export interface GetCustomerRequest {
    email: string;
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async addCustomerRaw(requestParameters: AddCustomerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Customer>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/customer`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddCustomerRequestToJSON(requestParameters.addCustomerRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerFromJSON(jsonValue));
    }

    /**
     */
    async addCustomer(requestParameters: AddCustomerOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Customer> {
        const response = await this.addCustomerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getCustomerRaw(requestParameters: GetCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Customer>> {
        if (requestParameters.email === null || requestParameters.email === undefined) {
            throw new runtime.RequiredError('email', 'Required parameter requestParameters.email was null or undefined when calling getCustomer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/customer/{email}`.replace(`{${"email"}}`, encodeURIComponent(String(requestParameters.email))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerFromJSON(jsonValue));
    }

    /**
     */
    async getCustomer(requestParameters: GetCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Customer> {
        const response = await this.getCustomerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
